"""
Django settings for MiDesign project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
# test
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from celery.schedules import crontab
from django.contrib.auth import login

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--*+!jy5m$9^*l%1ypbv+g11a9fesuk=q(*c8*#3pvg!&u#z3wn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'MIDesignApp.apps.MidesignappConfig',
    'SysModel',
    'books',
    'django_apscheduler',
    # 'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'MIDesignApp.Middleware.ExceptionMiddleware',
    'MIDesignApp.loghandler.RequestLogMiddleware',
    'MIDesignApp.middlewares.UserMiddleware.LoginMiddleware',
    'books.middleware.RequestLoggerMiddleware'

]

LOGIN_URL = '/login'

BASE_LOG_DIR = os.path.join(BASE_DIR, "log")
LOGGING = {
    # 版本
    'version': 1,
    # 是否禁止默认配置的记录器
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '{"time": "%(asctime)s", "level": "%(levelname)s", "method": "%(method)s", "username": "%(username)s", "sip": "%(sip)s", "dip": "%(dip)s", "path": "%(path)s", "status_code": "%(status_code)s", "reason_phrase": "%(reason_phrase)s", "func": "%(module)s.%(funcName)s:%(lineno)d",  "message": "%(message)s"}',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },
    # 过滤器
    'filters': {
        'request_info': {'()': 'MIDesignApp.loghandler.RequestLogFilter'},
    },
    'handlers': {
        # 标准输出
        'console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        # 自定义 handlers，输出到文件
        'restful_api': {
            'level': 'DEBUG',
            # 时间滚动切分
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_LOG_DIR, 'web-log.log'),
            'formatter': 'standard',
            # 调用过滤器
            'filters': ['request_info'],
            # 每天凌晨切分
            'when': 'MIDNIGHT',
            # 保存 30 天
            'backupCount': 30,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False
        },
        'web.log': {
            'handlers': ['restful_api'],
            'level': 'INFO',
            # 此记录器处理过的消息就不再让 django 记录器再次处理了
            'propagate': False
        },
    }
}

# 设置用户认证的模型
AUTH_USER_MODEL = "SysModel.Userinfo"

ROOT_URLCONF = 'MiDesign.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MiDesign.wsgi.application'

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'booksinfo',
        'HOST': 'localhost',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': '123456'
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'
# 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# X_FRAME_OPTIONS = 'SAMEORIGIN'
ALLOWED_HOSTS = ['*']
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# nolimit=['/LogConsole', '/downloadFile','/uppwd', '/channelmarkvaliable', '/channelsoftmark', '/channelsoftfile', '/channelfile', '/proplannodes',
#          '/workmenu', '/resume', '/jump', '/stop', '/python', '/search', '/config', '/preproject', '/plane', '/planedit', '/projectedit',
#          '/statemonitoring', '/getChartData','/optimizationstudy', '/nniconfig', '/nnispace', '/RunplanView', '/plannniedit',
#          '/nniplan', '/softnode', '/stopnode', '/runplan', '/stopplan', '/loginout', '/workContent', '/taskshow', '/media', '/upload']



# 发送短信的相关设置, 这些设置是当用户没有发送相关字段时, 默认使用的内容:
# 发送短信必须进行的设置:
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True  # 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性)
EMAIL_USE_SSL = False  # 是否使用SSL加密，qq企业邮箱要求使用，163邮箱设置为True的时候会报ssl的错误
# 我们使用的 smtp服务器 地址
EMAIL_HOST = 'smtp.163.com'
# 端口号
EMAIL_PORT = 25
# 下面的内容是可变的, 随后台设置的不同而改变:
# 发送邮件的邮箱
EMAIL_HOST_USER = 'xs_997zxs@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'BQ6pZgxC79LpMxka'  # 163邮箱授权码 ： BQ6pZgxC79LpMxka   qq邮箱授权吗：ofpmznbdokladfai
# 收件人看到的发件人
EMAIL_FROM = '赵鑫世<xs_997zxs@163.com>'





BROKER_URL = 'redis://:@127.0.0.1:6379/1'  # 代理人
CELERY_RESULT_BACKEND = 'redis://:@127.0.0.1:6379/1'  # 结果存储地址
CELERY_ACCEPT_CONTENT = ['application/json']  # 指定任务接收的内容序列化类型
CELERY_TASK_SERIALIZER = 'json'  # 任务序列化方式
CELERY_RESULT_SERIALIZER = 'json'  # 任务结果序列化方式
CELERY_TASK_RESULT_EXPIRES = 12 * 30  # 超过时间
CELERY_MESSAGE_COMPRESSION = 'zlib'  # 是否压缩
CELERYD_CONCURRENCY = 5  # 并发数默认已CPU数量定
CELERYD_PREFETCH_MULTIPLIER = 4  # celery worker 每次去redis取任务的数量
CELERYD_MAX_TASKS_PER_CHILD = 3  # 每个worker最多执行3个任务就摧毁，避免内存泄漏
CELERYD_FORCE_EXECV = True  # 可以防止死锁


# 时区配置，确保时间正确
CELERY_TIMEZONE = 'Asia/Shanghai'

# # Celery 定时任务
# CELERY_BEAT_SCHEDULE = {
#     'check_due_books_daily': {
#         'task': 'books.celery.send_verify_email',
#         'schedule': crontab(hour=9, minute=52),  # 每天 08:00 运行
#     },
# }


# 指定ASGI的路由地址
ASGI_APPLICATION = 'MiDesign.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": ["redis://:@127.0.0.1:6379/1"],
        },
    },
}